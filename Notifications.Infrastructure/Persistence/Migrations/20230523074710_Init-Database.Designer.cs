// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Notifications.Infrastructure.Persistence;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Notifications.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230523074710_Init-Database")]
    partial class InitDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Notifications.Domain.Entities.App", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("SortName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Apps");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.ChannelTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Channel")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("ChannelTemplates");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uuid");

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.Property<Guid>("NotificationGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NotificationTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.HasIndex("NotificationGroupId");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.NotificationGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string[]>("SupportedUserLevel")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[]>("Variables")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.HasIndex("ParentId");

                    b.ToTable("NotificationGroups");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.NotificationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.NotificationTypeChannel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Channel")
                        .HasColumnType("integer");

                    b.Property<int>("Enabled")
                        .HasColumnType("integer");

                    b.Property<Guid>("NotificationTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("NotificationTypeChannels");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.NotificationTypeChannelConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Enabled")
                        .HasColumnType("integer");

                    b.Property<Guid>("NotificationTypeChannelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeChannelId");

                    b.ToTable("NotificationTypeChannelConfigs");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.NotificationTypeChannelTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChannelTemplateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NotificationTypeChannelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChannelTemplateId");

                    b.HasIndex("NotificationTypeChannelId");

                    b.ToTable("NotificationTypeChannelTemplates");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.NotificationTypeUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Channel")
                        .HasColumnType("integer");

                    b.Property<int>("Enabled")
                        .HasColumnType("integer");

                    b.Property<Guid>("NotificationTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationTypeUsers");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AccountType")
                        .HasColumnType("integer");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("SubscriptionType")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.UserFirebaseToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DeviceToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserFirebaseTokens");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.Notification", b =>
                {
                    b.HasOne("Notifications.Domain.Entities.App", "App")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Notifications.Domain.Entities.NotificationGroup", "NotificationGroup")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Notifications.Domain.Entities.NotificationType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Notifications.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("App");

                    b.Navigation("NotificationGroup");

                    b.Navigation("NotificationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.NotificationGroup", b =>
                {
                    b.HasOne("Notifications.Domain.Entities.App", "App")
                        .WithMany("NotificationGroups")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Notifications.Domain.Entities.NotificationGroup", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("App");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.NotificationType", b =>
                {
                    b.HasOne("Notifications.Domain.Entities.NotificationGroup", "NotificationGroup")
                        .WithMany("NotificationTypes")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationGroup");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.NotificationTypeChannel", b =>
                {
                    b.HasOne("Notifications.Domain.Entities.NotificationType", "NotificationType")
                        .WithMany("NotificationTypeChannels")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.NotificationTypeChannelConfig", b =>
                {
                    b.HasOne("Notifications.Domain.Entities.NotificationTypeChannel", "NotificationTypeChannel")
                        .WithMany("NotificationTypeChannelConfigs")
                        .HasForeignKey("NotificationTypeChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationTypeChannel");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.NotificationTypeChannelTemplate", b =>
                {
                    b.HasOne("Notifications.Domain.Entities.ChannelTemplate", "ChannelTemplate")
                        .WithMany("NotificationTypeChannelTemplates")
                        .HasForeignKey("ChannelTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Notifications.Domain.Entities.NotificationTypeChannel", "NotificationTypeChannel")
                        .WithMany("NotificationTypeChannelTemplates")
                        .HasForeignKey("NotificationTypeChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChannelTemplate");

                    b.Navigation("NotificationTypeChannel");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.NotificationTypeUser", b =>
                {
                    b.HasOne("Notifications.Domain.Entities.NotificationType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Notifications.Domain.Entities.User", "User")
                        .WithMany("NotificationTypeUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.UserFirebaseToken", b =>
                {
                    b.HasOne("Notifications.Domain.Entities.User", "User")
                        .WithOne("UserFirebaseToken")
                        .HasForeignKey("Notifications.Domain.Entities.UserFirebaseToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.App", b =>
                {
                    b.Navigation("NotificationGroups");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.ChannelTemplate", b =>
                {
                    b.Navigation("NotificationTypeChannelTemplates");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.NotificationGroup", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("NotificationTypes");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.NotificationType", b =>
                {
                    b.Navigation("NotificationTypeChannels");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.NotificationTypeChannel", b =>
                {
                    b.Navigation("NotificationTypeChannelConfigs");

                    b.Navigation("NotificationTypeChannelTemplates");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.User", b =>
                {
                    b.Navigation("NotificationTypeUsers");

                    b.Navigation("Notifications");

                    b.Navigation("UserFirebaseToken")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
